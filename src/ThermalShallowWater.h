typedef double (ICfunc) (double* xi);

class ThermalShallowWater {
    public:
        ThermalShallowWater(Topo* _topo, Geom* _geom);
        ~ThermalShallowWater();
        double dt;
        double grav;
        double omega;
        double del2;
        bool do_visc;
        int step;
        int rank;
        GaussLobatto* quad;
        LagrangeNode* node;
        LagrangeEdge* edge;
        Topo* topo;
        Geom* geom;
        Pvec* m0;
        Umat* M1;
        Wmat* M2;
        E10mat* NtoE;
        E21mat* EtoF;
        RotMat* R;
        Uhmat* M1h;
        WtQUmat* K;
        WtQmat* WQ;
        Whmat* M2h;
        Mat WQT;
        Mat M1sT;
        Mat KT;
        Mat KTM2inv;
        Mat M2D;
        Mat M2DM1inv;
        Mat KDT;
        Mat KDTM2inv;
        Mat QM2inv;
        Mat D_s_prime;
        Mat Rinv;
        Mat DsRinv;
        Mat HELM;
        Vec fg;            // coriolis vector (global)
        Mat E01M1;
        Mat E12M2;
        Mat G_s;
        Mat D_h;
        Mat D_s;
        Mat Q;
        Mat M1inv;
        KSP ksp;           // 1 form mass matrix linear solver
        Vec ui;
        Vec hi;
        Vec si;
        Vec uj;
        Vec hj;
        Vec sj;
        Vec uil;
        Vec ujl;
        Vec dhl;
        Vec sil; // these are (S/h) on the H1 space!
        Vec sjl;
        P_up_mat* P_up;
        RotMat_up* R_up;
        KSP ksp_p;
        void coriolis();
        void curl(Vec u, Vec* w, bool add_f);
        void diagnose_F(Vec* F);
        void diagnose_Phi(Vec* Phi);
        void diagnose_q(Vec* qi, Vec* qj);
        void diagnose_s(Vec* _si, Vec* _sj);
        void init0(Vec q, ICfunc* func);
        void init1(Vec u, ICfunc* func_x, ICfunc* func_y);
        void init2(Vec h, ICfunc* func);
        void err0(Vec u, ICfunc* fw, ICfunc* fu, ICfunc* fv, double* norms);
        void err1(Vec u, ICfunc* fu, ICfunc* fv, ICfunc* fp, double* norms);
        void err2(Vec u, ICfunc* fu, double* norms);
        double int0(Vec u);
        double int2(Vec u);
        double intE();
        void laplacian(Vec u, Vec* ddu);
        void coriolisMatInv(Mat A, Mat* Ainv, MatReuse reuse);
        void writeConservation(double time, Vec u, Vec h, double mass0, double vort0, double ener0);
        void assemble_residual(Vec fu, Vec fh, Vec fs);
        void solve_schur(Vec fu, Vec fh, Vec fs, Vec du, Vec dh, Vec ds);
        void solve(Vec u, Vec h, Vec s, double _dt, bool save);
        double viscosity();
};
